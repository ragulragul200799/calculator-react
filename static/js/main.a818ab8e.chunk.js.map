{"version":3,"sources":["redux/fromreducer/formactiontype.js","components/alert/alert.notification.js","components/form/form.component.js","redux/fromreducer/fromaction.js","components/formItems/formitems.component.js","components/list/list.component.js","components/alert/alert.component.js","App.js","serviceWorker.js","redux/fromreducer/form.reducer.js","redux/rootreducer.js","redux/store.js","index.js"],"names":["formActionType","notification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","BudjectForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","item","id","uuid","charge","state","amount","props","additem","store","addNotification","this","className","htmlFor","placeholder","Component","connect","disptach","payload","BudjectItem","list","map","key","onClick","deleteitem","BudjectList","length","deleteall","form","Alert","App","items","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","INITIAL_STATE","formReducer","action","filter","ite","rootReducer","combineReducers","middleware","logger","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a818ab8e.chunk.js","sourcesContent":["export const formActionType = {\r\n    \"ADD_ITEM\": \"ADD_ITEM\",\r\n    \"DELETE_ALL\": \"DELETE_ALL\",\r\n    \"DELETE_ITEM\": \"DELETE_ITEM\",\r\n    \"EDIT_ITEM\":\"EDIT_ITEM\", \r\n}","const notification = {\r\n  title: \"notification\",\r\n  message: \"hello\",\r\n  type: \"success\",\r\n  insert: \"bottom\",\r\n  container: \"bottom-center\",\r\n  animationIn: [\"animated\", \"fadeIn\"],\r\n  animationOut: [\"animated\", \"fadeOut\"],\r\n  dismiss: {\r\n    duration: 1000,\r\n  },\r\n};\r\nexport default notification;\r\n","import React, { Component } from \"react\";\r\nimport { MdSend } from 'react-icons/md';\r\nimport './form.css'\r\nimport { additem } from '../../redux/fromreducer/fromaction'\r\nimport { connect } from 'react-redux'\r\nimport uuid from 'react-uuid'\r\nimport { store } from 'react-notifications-component';\r\nimport notification from '../alert/alert.notification';\r\n\r\n\r\nclass BudjectForm extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      charge: \"\",\r\n      amount : \"\"\r\n    }\r\n  }\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]:e.target.value\r\n    })\r\n  }\r\n  onSubmit = (e) => {\r\n    e.preventDefault()\r\n    const item = { id: uuid(), charge: this.state.charge, amount: this.state.amount }\r\n    if (this.state.charge !== \"\" && this.state.amount > 0) {\r\n      this.props.additem(item)\r\n      store.addNotification({ ...notification, message: \"added successfully\", type: \"success\", title: \"success\" })\r\n      this.setState({\r\n        charge: \"\",\r\n        amount:''\r\n      })\r\n    }\r\n    else {\r\n      store.addNotification({...notification , message:\"pleade fill the charge and amount\" , type:\"danger\" , title:\"checkout\"})\r\n    }\r\n  }\r\n  render() {\r\n    const charge = this.state.charge;\r\n    const amount = this.state.amount;\r\n    return <div>\r\n    <form onSubmit={this.onSubmit}>\r\n        <div className=\"form-center our_from \">\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"charge\" className=\"form-control-label\">charge</label>\r\n            <input placeholder=\"e.g car diesel\" className=\"form-control\" type=\"text\" id=\"charge\" name=\"charge\" value={charge} onChange={this.onChange}/>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"amount\" className=\"form-control-label\">amount</label>\r\n            <input placeholder=\"e.g 500\" className=\"form-control\" type=\"number\" name=\"amount\" id=\"amount\" value={amount} onChange={this.onChange} />\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-success click_btn\">\r\n          Submit <MdSend className=\"click-btn\"/>\r\n        </button>\r\n        </form>\r\n    </div>\r\n  }\r\n}\r\n\r\nconst mapDisptachToProps = (disptach) => ({\r\n  additem : (item) => disptach(additem(item))\r\n})\r\n\r\nexport default connect(null,mapDisptachToProps)(BudjectForm);\r\n","import { formActionType } from './formactiontype'\r\n\r\nexport const additem = (item) =>({\r\n    type: formActionType.ADD_ITEM,\r\n    payload:item\r\n})\r\n\r\nexport const deleteall = () =>({\r\n    type: formActionType.DELETE_ALL,\r\n})\r\n\r\nexport const deleteitem = (item) =>({\r\n    type: formActionType.DELETE_ITEM,\r\n    payload : item\r\n})\r\n\r\nexport const edititem = (id) => ({\r\n    type: formActionType.EDIT_ITEM,\r\n    payload : id\r\n})","import React, { Component } from \"react\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport './item.css'\r\nimport { connect } from 'react-redux';\r\nimport { deleteitem } from '../../redux/fromreducer/fromaction'\r\nimport { store } from 'react-notifications-component';\r\nimport notification from '../alert/alert.notification';\r\n\r\nclass BudjectItem extends Component {\r\n  render() {\r\n    const list = this.props.list;\r\n    return (\r\n      <>\r\n        {list.map((item) => (\r\n          <div className=\"items\" key={item.id}>\r\n            <span className=\"charge\">{item.charge} </span>\r\n            <span className=\"amount\">${item.amount}</span>\r\n            <span className=\"btn-icon\">\r\n              <MdDelete className=\"btn-del\" onClick={() => { this.props.deleteitem(item); store.addNotification({ ...notification, message: `deleted ${item.charge}`, title: 'success' }) }} />\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDisptachToProps = (disptach) => ({\r\n  deleteitem : (item) =>(disptach(deleteitem(item)))\r\n})\r\nexport default connect(null , mapDisptachToProps)(BudjectItem);\r\n","import React, { Component } from \"react\";\r\n// import uuid from \"react-uuid\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport BudjectItem from \"../formItems/formitems.component\";\r\nimport {connect } from 'react-redux'\r\nimport './list.css'\r\nimport { deleteall } from '../../redux/fromreducer/fromaction'\r\nimport { store } from 'react-notifications-component';\r\nimport notification from '../alert/alert.notification';\r\nclass BudjectList extends Component {\r\n  render() {\r\n    const list = this.props.item;\r\n    return (\r\n      <>\r\n        <div className=\"list\">\r\n          <BudjectItem list={list} />\r\n          </div>\r\n            {list.length > 0 ? (\r\n          <button className=\"btn btn-danger clear_btn\" onClick={() => { this.props.deleteall(); store.addNotification({...notification , message: 'deleted everything' , title:'success'})}}>\r\n                clear items\r\n                <MdDelete className=\"btn-ico\" />\r\n              </button>\r\n            ) : null}\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  item : state.form.item\r\n})\r\nconst mapDisptachToProps = (disptach) => ({\r\n  deleteall : () =>(disptach(deleteall()))\r\n})\r\nexport default  connect(mapStateToProps , mapDisptachToProps)(BudjectList);\r\n","import React, { Component } from 'react';\r\nimport { store } from 'react-notifications-component'\r\nimport notification from './alert.notification'\r\nclass Alert extends Component{\r\n    componentDidMount() {\r\n        store.addNotification({...notification ,  message : 'welcome you' , title:'hello'})\r\n    }\r\n    render() {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Alert;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport BudjectFrom from \"./components/form/form.component\";\nimport BudjectList from \"./components/list/list.component\";\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport Alert from \"./components/alert/alert.component\";\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n \n  render() {\n    const list = this.props.items\n    return (\n      <div className=\"App\">\n        <ReactNotification/>\n        <Alert />\n        <h1>Budget calculation </h1>\n        <div className=\"main-content\">\n          <BudjectFrom />\n          <BudjectList />\n          <h2 className=\"totalamt\">\n            Your Total : $\n              {list.reduce((acc, curr) => {\n                return (acc += parseInt(curr.amount));\n              }, 0)}\n            </h2>\n        </div>\n        <div className=\"footer\"> \n          <p>have a good days</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  items : state.form.item\n})\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { formActionType } from './formactiontype';\r\n\r\nconst INITIAL_STATE = {\r\n    item :[]\r\n}\r\n\r\nconst formReducer = (state=INITIAL_STATE , action ) => {\r\n    switch (action.type) {\r\n        case formActionType.ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                item:[...state.item, action.payload]\r\n            }\r\n        case formActionType.DELETE_ALL:\r\n            return{\r\n                ...state,\r\n                item:[]\r\n            }\r\n        case formActionType.DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                item: state.item.filter(ite =>(action.payload.id !== ite.id))\r\n            }\r\n        case formActionType.EDIT_ITEM:\r\n            return {\r\n                ...state,\r\n            }\r\n        default:\r\n            return state\r\n    }   \r\n}\r\n\r\nexport default formReducer;","import { combineReducers } from 'redux';\r\nimport formReducer from './fromreducer/form.reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    form:formReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\r\n// import thunk from 'redux-thunk';\r\nimport { logger } from 'redux-logger';\r\nimport rootReducer from './rootreducer';\r\n\r\nconst middleware = [logger]\r\n// middleware1 = [thunk]\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n)","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport { store } from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"all\">\n      <ReactNotification />\n      <App />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}