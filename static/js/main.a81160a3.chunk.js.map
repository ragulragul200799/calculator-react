{"version":3,"sources":["redux/calculator/actiontype.js","components/cal_buttons/cal_btn.component.js","redux/calculator/action.js","components/alert.notification.js","components/cal_screen/cal_scr.component.js","components/calculator/calculator.component.js","App.js","serviceWorker.js","redux/calculator/calculate.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["actionTypes","CalBtn","numbers","id","val","className","this","map","number","key","onClick","props","append","clear","calculate","Component","connect","dispatch","type","payload","notification","title","message","insert","container","animationIn","animationOut","dismiss","duration","CalScr","state","length","store","addNotification","Calculator","App","Boolean","window","location","hostname","match","INITIAL_STATE","safeeval","require","calculatorReducer","action","String","rootReducer","combineReducers","calculateReducer","middleware","logger","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a81160a3.chunk.js","sourcesContent":["export const actionTypes = {\r\n    \"APPEND_NUMBER\": \"APPEND_NUMBER\",\r\n    \"CALCULATE\": \"CALCULATE\",\r\n    \"CLEAR\": \"CLEAR\"\r\n}","import React, { Component } from 'react';\r\nimport './calbtn.css'\r\nimport { connect } from 'react-redux';\r\nimport {append , calculate , clear} from '../../redux/calculator/action'\r\nclass CalBtn extends Component {\r\n    constructor () {\r\n        super()\r\n\r\n        this.numbers=[\r\n                {\r\n                    id: 1,\r\n                    val: 1,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    val: 2,\r\n                },\r\n                 {\r\n                    id: 3,\r\n                    val: 3,\r\n            },\r\n            {\r\n                    id: 10,\r\n                val: '+',\r\n            },\r\n                 \r\n                {\r\n                    id: 4,\r\n                    val: 4,\r\n                },\r\n             {\r\n                    id: 5,\r\n                    val: 5,\r\n                },\r\n                {\r\n                    id: 6,\r\n                    val: 6,\r\n            },\r\n            {\r\n                id: 11,\r\n                val:'-'\r\n                },\r\n                 {\r\n                    id: 7,\r\n                    val: 7,\r\n                },\r\n                {\r\n                    id: 8,\r\n                    val: 8,\r\n                },\r\n                {\r\n                    id: 9,\r\n                    val: 9,\r\n            },\r\n            {\r\n                id: 13,\r\n                val:\"/\",\r\n            },\r\n            {\r\n                id: 14,\r\n                val: '.'\r\n            },\r\n                {\r\n                    id: 0,\r\n                    val: 0,\r\n                }\r\n        ]\r\n    }\r\n    render() { \r\n        return (\r\n            <div className=\"buttons\">\r\n                {\r\n                    this.numbers.map(number => (\r\n                        <button className=\"number\" key={number.id} onClick={()=>this.props.append(number.val)}>\r\n                            <span>\r\n                                {number.val}\r\n                            </span>\r\n                        </button>\r\n                    ))\r\n                }\r\n                <button className=\"number-btn\" onClick={() => this.props.clear()}>\r\n                    CLEAR\r\n                </button>\r\n                <button className=\"number-btns\" onClick={()=>this.props.calculate()}>\r\n                    =\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDisptachToProps = (dispatch) => ({\r\n    append: (val) => (dispatch(append(val))),\r\n    calculate: () => (dispatch(calculate())),\r\n    clear: () => (dispatch(clear()))\r\n})\r\n\r\n \r\nexport default connect(null , mapDisptachToProps)(CalBtn);","import { actionTypes } from './actiontype'\r\n\r\n// const safeeval = require('safe-eval')\r\nexport const append = (val) =>({\r\n    type: actionTypes.APPEND_NUMBER,\r\n    payload:val\r\n})\r\n\r\nexport const calculate = () =>({\r\n    type: actionTypes.CALCULATE,\r\n})\r\n\r\nexport const clear = () => ({\r\n    type: actionTypes.CLEAR\r\n})","const notification = {\r\n  title: \"notification\",\r\n  message: \"hello\",\r\n  type: \"success\",\r\n  insert: \"bottom\",\r\n  container: \"bottom-center\",\r\n  animationIn: [\"animated\", \"fadeIn\"],\r\n  animationOut: [\"animated\", \"fadeOut\"],\r\n  dismiss: {\r\n    duration: 1000,\r\n  },\r\n};\r\nexport default notification;\r\n","import React, { Component } from 'react';\r\nimport './calscreen.css';\r\nimport { connect } from 'react-redux';\r\nimport { store } from 'react-notifications-component';\r\nimport notification from '../alert.notification'\r\nclass CalScr extends Component {\r\n    state = {  }\r\n    render() {\r\n        const val = this.props.val\r\n        return (\r\n            <div className=\"screen\">\r\n                {\r\n                    val.length > 25 ? () => { store.addNotification({ ...notification , message:\"please enter the numbers within the box\" , type:\"danger\" } ) } :  val}\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    val:state.val.val\r\n}) \r\n\r\nexport default connect(mapStateToProps)(CalScr);\r\n\r\n","import React, { Component } from 'react';\r\nimport CalBtn from '../cal_buttons/cal_btn.component'\r\nimport CatScr from '../cal_screen/cal_scr.component'\r\nimport './calculator.css'\r\n\r\nclass Calculator extends Component {\r\n    render() { \r\n        return ( \r\n            <>\r\n            <div className=\"calculator\">    \r\n                <h1>CALCULATOR</h1>\r\n                    <CatScr />\r\n                    <CalBtn/>\r\n                </div>\r\n\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Calculator;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Caluclator from './components/calculator/calculator.component'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n      <Caluclator />\n      </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { actionTypes } from './actiontype'\r\nconst INITIAL_STATE = {\r\n     val : '',\r\n}\r\n \r\nvar safeeval = require('safe-eval')\r\nconst calculatorReducer = (state = INITIAL_STATE, action)=>{\r\n    switch (action.type) {\r\n        case actionTypes.APPEND_NUMBER: \r\n            return {\r\n                ...state,\r\n                val: state.val + String(action.payload)\r\n            }\r\n        case actionTypes.CALCULATE:\r\n            return {\r\n                ...state,\r\n                val: safeeval(state.val)\r\n            }\r\n        case actionTypes.CLEAR: \r\n            return {\r\n                ...state,\r\n                val : ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default calculatorReducer;","import { combineReducers } from 'redux'\r\nimport calculateReducer from './calculator/calculate.reducer'\r\nconst rootReducer = combineReducers({\r\nval : calculateReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\r\n// import thunk from 'redux-thunk';\r\nimport { logger } from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = [logger]\r\n// middleware1 = [thunk]\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n)","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n      <ReactNotification />\n      <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}